#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pgtypes_date.h>
EXEC SQL BEGIN DECLARE SECTION; 
char connection_string [] = "rgr_db@127.0.0.1:5432";
char login [] = "postgres";
char password [] = "";
EXEC SQL END DECLARE SECTION;


const int string_size = 256;
const int text_size = 1024;

//для взаимодействия с БД
EXEC SQL BEGIN DECLARE SECTION;
typedef struct{
  char field0[string_size];
  char field1[string_size];
  char field2[string_size];
  char field3[string_size]; 
  char field4[string_size];
  char field5[string_size];
} cursor;
EXEC SQL END DECLARE SECTION;	

void db_connect(){
  EXEC SQL CONNECT TO :connection_string  USER :login using :password;

  if( sqlca.sqlcode != 0 || strncmp(sqlca.sqlstate,"00",2))
  {
    printf("connect -- NoOK\n");
    exit(-1);
  }
  else
  {
    printf("connect --OK\n");	
  }	
}

void db_disconnect(){
  exec sql disconnect;
  printf("disconnect --OK\n");
}



void orm_select_values(char *table_name, cursor *result, char *condition ){

  EXEC SQL BEGIN DECLARE SECTION;
    cursor dbval;
    char stmt[text_size];
  EXEC SQL END DECLARE SECTION;	

  sprintf(stmt, "SELECT * FROM %s WHERE %s", table_name, condition);

  EXEC SQL PREPARE sqlstmt FROM :stmt;
  EXEC SQL DECLARE SelectValuesCursor CURSOR FOR sqlstmt;

  EXEC SQL OPEN SelectValuesCursor;
  EXEC SQL WHENEVER NOT FOUND DO BREAK;  

  while(1)
  {
    EXEC SQL FETCH SelectValuesCursor INTO :dbval;
    *result = dbval;
    result++;
  }

  EXEC SQL CLOSE SelectValuesCursor;
  EXEC SQL COMMIT;
}

void orm_read_all_records(char *table_name, cursor *result){
  EXEC SQL BEGIN DECLARE SECTION;
    cursor dbval;
    char stmt[text_size];
  EXEC SQL END DECLARE SECTION;	
  sprintf(stmt, "SELECT * FROM %s", table_name);

  EXEC SQL PREPARE sqlstmt FROM :stmt;
  EXEC SQL DECLARE ReadAllRecordCursor CURSOR FOR sqlstmt;

  EXEC SQL OPEN ReadAllRecordCursor;
  EXEC SQL WHENEVER NOT FOUND DO BREAK;  

  while(1)
  {
    EXEC SQL FETCH ReadAllRecordCursor INTO :dbval;
    *result = dbval;
    result ++;
  }

  EXEC SQL CLOSE ReadAllRecordCursor;
  EXEC SQL COMMIT;
}

void orm_update_values(char *table_name, char *condition, char *data){
  EXEC SQL BEGIN DECLARE SECTION;
    char stmt[text_size];
  EXEC SQL END DECLARE SECTION;
  sprintf(stmt, "UPDATE %s SET %s WHERE %s", table_name, data, condition);
  EXEC SQL EXECUTE IMMEDIATE :stmt;
  EXEC SQL COMMIT;
}

void orm_insert_values(char *table_name, char *data){
  EXEC SQL BEGIN DECLARE SECTION;
    char stmt[text_size];
  EXEC SQL END DECLARE SECTION;
  sprintf(stmt, "INSERT INTO %s VALUES(%s)", table_name, data);
  EXEC SQL EXECUTE IMMEDIATE :stmt;
  EXEC SQL COMMIT;  
}
